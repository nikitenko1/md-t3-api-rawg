import { useRouter } from "next/router";
import React, { useState } from "react";
import { useMediaQuery } from "usehooks-ts";
import { rawgClient } from "../../../lib/axios";
import Loader from "../../components/Loader";
import Body from "../../components/Body";
import Head from "next/head";
import { useQuery } from "@tanstack/react-query";
import { GameScreenshots, IGameDetails } from "../../../interface";
import fetchData from "../../../rawg/fetchData";
import { motion } from "framer-motion";
import { BiLeftArrow } from "react-icons/bi";
// import Swiper core and required modules
import { Scrollbar, Navigation, Pagination, A11y, EffectFade } from "swiper";

import { Swiper, SwiperSlide } from "swiper/react";
import Image from "next/legacy/image";
import { v4 } from "uuid";
import { IoIosArrowDown, IoIosArrowUp } from "react-icons/io";
import moment from "moment";

const GameDetailsPage = () => {
  const { query, back } = useRouter();
  const [showMore, setShowMore] = useState(false);
  // Easily retrieve media dimensions with this Hook React which also works onResize
  const tablet = useMediaQuery("(min-width:1024px)");

  const fetchDetails = async () => {
    // Get details of the game. https://api.rawg.io/api/games/{id}
    const res = await rawgClient.get(
      `/games/${query?.gameId}?key=${process.env.NEXT_PUBLIC_RAWG_API_KEY}`
    );
    return res.data;
  };

  const {
    data: game,
    isLoading,
    isFetching,
  } = useQuery<IGameDetails>(["fetchDetails"], fetchDetails, {
    refetchOnWindowFocus: false,
  });

  const { data: gameScreenshots, isFetching: screenshotFetching } =
    // Get screenshots for the game. https://api.rawg.io/api/games/{game_pk}/screenshots
    useQuery<GameScreenshots>(
      ["fetchScreenshots"],
      () => fetchData(`https://api.rawg.io/api/games/${game?.id}/screenshots?`),
      {
        enabled: !isFetching,
        refetchOnWindowFocus: false,
      }
    );

  if (isLoading)
    return (
      <div className="min-h-screen justify-center pl-60 pt-8">
        <Loader />
      </div>
    );

  if (isFetching || screenshotFetching) return <Body>{null}</Body>;

  const variants = {
    initial: {
      x: -1000,
      opacity: 0,
    },
    animate: {
      x: 0,
      opacity: 1,
    },
    exit: {
      x: 1200,
      opacity: 0,
    },
  };

  const showMoreVariants = {
    show: {
      height: "auto",
      opacity: 1,
    },
    hidden: {
      height: 0,
      opacity: 0,
    },
  };

  return (
    <>
      <Head>
        <title>{game?.name}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Body>
        <div
          className="xs:text-lg flex items-center justify-between gap-x-2 px-1 
         text-base sm:px-2 sm:text-xl lg:px-4 lg:text-2xl"
        >
          <motion.button
            variants={variants}
            initial="initial"
            animate="animate"
            exit="exit"
            transition={{
              type: "string",
              damping: 10,
              stifness: 200,
            }}
            onClick={() => back()}
            className="flex items-center gap-x-2 text-white"
          >
            <BiLeftArrow />
            <p>Back</p>
          </motion.button>
          <motion.h1
            variants={variants}
            initial="initial"
            animate="animate"
            exit="exit"
            className="truncate font-black text-white"
          >
            {game?.name}
          </motion.h1>
        </div>
        <motion.div
          variants={variants}
          initial="initial"
          transition={{
            type: "string",
            damping: 10,
            stifness: 200,
          }}
          animate="animate"
          exit="exit"
          className="mt-4 flex flex-col gap-4 lg:flex-row"
        >
          <Swiper
            // install Swiper modules
            modules={[Navigation, Pagination, Scrollbar, A11y, EffectFade]}
            speed={700} // Duration of transition between slides (in ms)
            height={500} // Swiper height (in px)
            width={500} // Swiper width (in px)
            slidesPerView={1} // Number of slides per view (slides visible at the same time on slider's container)
            navigation={true}
            loop // et to true to enable continuous loop mode
            pagination={{ clickable: true }}
            scrollbar={{ draggable: true }}
            className="neon relative w-full flex-1 overflow-hidden rounded-lg text-white hover:cursor-grab
            active:cursor-grabbing lg:flex-[0.75]"
            onSwiper={(swiper) => console.log(swiper)}
            onSlideChange={() => console.log("slide change")}
          >
            {gameScreenshots?.results.map((screenshot) => (
              <SwiperSlide key={v4()}>
                {tablet ? (
                  <Image
                    className="overflow-hidden rounded-lg object-cover transition-all duration-200 ease-in-out 
                    hover:scale-110 "
                    src={screenshot.image}
                    layout="fill"
                    alt="screenshot"
                  />
                ) : (
                  <Image
                    className="overflow-hidden rounded-lg object-cover transition-all duration-200 ease-in-out 
                    hover:scale-110 "
                    src={screenshot.image}
                    width={600}
                    height={400}
                    objectFit="cover"
                    alt="screenshot"
                  />
                )}
              </SwiperSlide>
            ))}
          </Swiper>
          <div className="neon mr-2 flex-[0.5] rounded-lg lg:flex-1">
            <div
              className="rounded-thumb inset-shadow bg-primary scrollbar-thin scrollbar-track-transparent
               scrollbar-thumb-[#d05aff] relative h-96  
            overflow-y-scroll rounded-lg p-4 text-sm leading-relaxed text-gray-400"
            >
              <h1 className="mb-2 text-2xl font-bold text-white ">About</h1>
              <>{game?.description.replace(/<[^>]+>/g, "")}</>
            </div>
            <div className="bg-[#1c021f] p-4 text-white">
              <button
                className="ml-auto flex gap-x-2"
                onClick={() => setShowMore(!showMore)}
              >
                <span>{showMore ? "Hide" : "More"}</span>
                {showMore ? (
                  <IoIosArrowUp className="animate-bounce" />
                ) : (
                  <IoIosArrowDown className="animate-bounce" />
                )}
              </button>
              <motion.div
                variants={showMoreVariants}
                animate={showMore ? "show" : "hidden"}
                className={`space-y-2 overflow-hidden text-sm text-gray-400`}
              >
                <p className="text-lg font-semibold text-white">
                  {game?.name_original}
                </p>
                <div className="flex items-center justify-between pt-2">
                  <p>Release Date: </p>
                  <p>{moment(game?.released).format("LL")}</p>
                </div>
                <div className="flex items-center justify-between pt-2">
                  <p>ESRB: </p>
                  <p>{game?.esrb_rating?.name}</p>
                </div>
                <div className="flex justify-between gap-x-2 pt-2">
                  <p>Platforms: </p>
                  <div className="flex flex-wrap gap-x-2">
                    {game?.platforms.map((platform) => (
                      <p className="whitespace-nowrap" key={v4()}>
                        {platform.platform.name},
                      </p>
                    ))}
                  </div>
                </div>
              </motion.div>
            </div>
          </div>
        </motion.div>
        <motion.div
          variants={variants}
          initial="initial"
          transition={{
            type: "string",
            damping: 10,
            stifness: 200,
          }}
          animate="animate"
          exit="exit"
          className="mt-2 w-1/2 text-sm leading-6 tracking-wide text-gray-400"
        >
          <div className="mt-4 space-y-4">
            {game?.platforms.map((platform) => (
              <div key={v4()} className="w-full space-y-2">
                <h1 className="text-2xl text-white">
                  System requirements for {platform.platform.name}
                </h1>
                <div className="flex flex-col">
                  <p className="text-xl text-white">Minimum</p>
                  {platform.requirements.minimum === undefined ? (
                    <p className="text-sm">Not added</p>
                  ) : (
                    <p className="text-sm">
                      {platform.requirements.minimum?.replace("Minimum:", "")}
                    </p>
                  )}
                </div>
                <div className="flex flex-col">
                  <p className="text-xl text-white">Recommended</p>
                  {platform.requirements.recommended === undefined ? (
                    <p className="text-sm">Not added</p>
                  ) : (
                    <p className="text-sm">
                      {platform.requirements.recommended?.replace(
                        "Recommended:",
                        ""
                      )}
                    </p>
                  )}
                </div>
              </div>
            ))}
          </div>
        </motion.div>
      </Body>
    </>
  );
};

export default GameDetailsPage;
