import { useQuery } from "@tanstack/react-query";
import { useRouter } from "next/router";
import React from "react";
import { PlatformResp } from "../../interface";
import fetchData from "../../rawg/fetchData";
import { useMediaQuery } from "usehooks-ts";
import Head from "next/head";
import Body from "../components/Body";
import { v4 } from "uuid";
import PlatformCard from "../components/PlatformCard";
import { motion } from "framer-motion";
import { BiLeftArrow } from "react-icons/bi";

const PlatformsPage = () => {
  const router = useRouter();

  const { data: platforms } = useQuery<PlatformResp>(
    ["fetchPlatforms"],
    () => fetchData(`https://api.rawg.io/api/platforms?`),
    {
      refetchOnWindowFocus: false,
      staleTime: 1000000,
    }
  );

  const variants = {
    initial: {
      x: -1000,
      opacity: 0,
    },
    animate: {
      x: 0,
      opacity: 1,
    },
    exit: {
      x: 1200,
      opacity: 0,
    },
  };
  // Easily retrieve media dimensions with this Hook React which also works onResize
  const small = useMediaQuery("(min-width:640px)");

  return (
    <>
      <Head>
        <title>Platforms</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Body>
        <div className="my-4 flex items-center justify-between px-4">
          <motion.button
            variants={variants}
            initial="initial"
            animate="animate"
            exit="exit"
            transition={{
              type: "string",
              damping: 10,
              stifness: 200,
            }}
            onClick={() => router.back()}
            className=" xs:text-lg flex items-center gap-x-2 text-base text-white sm:text-2xl"
          >
            <BiLeftArrow />
            {small ? <p>Back</p> : null}
          </motion.button>
          {/* Whether the router fields are updated client-side and ready for use */}
          {router.isReady && (
            <motion.h1
              variants={variants}
              initial="initial"
              animate="animate"
              exit="exit"
              className="xs:text-xl text-lg font-black capitalize text-white sm:text-3xl md:text-5xl"
            >
              Platforms
            </motion.h1>
          )}
        </div>
        <div className=" grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3">
          {platforms?.results.map((platform) => (
            <PlatformCard key={v4()} platform={platform} />
          ))}
        </div>
      </Body>
    </>
  );
};

export default PlatformsPage;
